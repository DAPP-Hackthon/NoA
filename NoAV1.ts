// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ApprovalForSlot extends ethereum.Event {
  get params(): ApprovalForSlot__Params {
    return new ApprovalForSlot__Params(this);
  }
}

export class ApprovalForSlot__Params {
  _event: ApprovalForSlot;

  constructor(event: ApprovalForSlot) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _slot(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _operator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class ApprovalValue extends ethereum.Event {
  get params(): ApprovalValue__Params {
    return new ApprovalValue__Params(this);
  }
}

export class ApprovalValue__Params {
  _event: ApprovalValue;

  constructor(event: ApprovalValue) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BurnToken extends ethereum.Event {
  get params(): BurnToken__Params {
    return new BurnToken__Params(this);
  }
}

export class BurnToken__Params {
  _event: BurnToken;

  constructor(event: BurnToken) {
    this._event = event;
  }

  get eventId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class EventAdded extends ethereum.Event {
  get params(): EventAdded__Params {
    return new EventAdded__Params(this);
  }
}

export class EventAdded__Params {
  _event: EventAdded;

  constructor(event: EventAdded) {
    this._event = event;
  }

  get organizer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eventId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get eventName(): string {
    return this._event.parameters[2].value.toString();
  }

  get eventDescription(): string {
    return this._event.parameters[3].value.toString();
  }

  get eventImage(): string {
    return this._event.parameters[4].value.toString();
  }

  get mintMax(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class EventToken extends ethereum.Event {
  get params(): EventToken__Params {
    return new EventToken__Params(this);
  }
}

export class EventToken__Params {
  _event: EventToken;

  constructor(event: EventToken) {
    this._event = event;
  }

  get eventId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get organizer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class SetMetadataDescriptor extends ethereum.Event {
  get params(): SetMetadataDescriptor__Params {
    return new SetMetadataDescriptor__Params(this);
  }
}

export class SetMetadataDescriptor__Params {
  _event: SetMetadataDescriptor;

  constructor(event: SetMetadataDescriptor) {
    this._event = event;
  }

  get metadataDescriptor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SlotChanged extends ethereum.Event {
  get params(): SlotChanged__Params {
    return new SlotChanged__Params(this);
  }
}

export class SlotChanged__Params {
  _event: SlotChanged;

  constructor(event: SlotChanged) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _oldSlot(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _newSlot(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferValue extends ethereum.Event {
  get params(): TransferValue__Params {
    return new TransferValue__Params(this);
  }
}

export class TransferValue__Params {
  _event: TransferValue;

  constructor(event: TransferValue) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NoAV1__createEventInputEvent_Struct extends ethereum.Tuple {
  get organizer(): Address {
    return this[0].toAddress();
  }

  get eventName(): string {
    return this[1].toString();
  }

  get eventDescription(): string {
    return this[2].toString();
  }

  get eventImage(): string {
    return this[3].toString();
  }

  get eventMetadataURI(): string {
    return this[4].toString();
  }

  get mintMax(): BigInt {
    return this[5].toBigInt();
  }
}

export class NoAV1__getEventInfoResultValue0Struct extends ethereum.Tuple {
  get organizer(): Address {
    return this[0].toAddress();
  }

  get eventName(): string {
    return this[1].toString();
  }

  get eventDescription(): string {
    return this[2].toString();
  }

  get eventImage(): string {
    return this[3].toString();
  }

  get eventMetadataURI(): string {
    return this[4].toString();
  }

  get mintMax(): BigInt {
    return this[5].toBigInt();
  }
}

export class NoAV1__getSlotDetailResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get image(): string {
    return this[2].toString();
  }

  get eventId(): BigInt {
    return this[3].toBigInt();
  }

  get eventMetadataURI(): string {
    return this[4].toString();
  }
}

export class NoAV1 extends ethereum.SmartContract {
  static bind(address: Address): NoAV1 {
    return new NoAV1("NoAV1", address);
  }

  allowance(tokenId_: BigInt, operator_: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId_),
        ethereum.Value.fromAddress(operator_)
      ]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    tokenId_: BigInt,
    operator_: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId_),
        ethereum.Value.fromAddress(operator_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner_: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner_)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf1(tokenId_: BigInt): BigInt {
    let result = super.call("balanceOf", "balanceOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf1(tokenId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  createEvent(event_: NoAV1__createEventInputEvent_Struct): BigInt {
    let result = super.call(
      "createEvent",
      "createEvent((address,string,string,string,string,uint256)):(uint256)",
      [ethereum.Value.fromTuple(event_)]
    );

    return result[0].toBigInt();
  }

  try_createEvent(
    event_: NoAV1__createEventInputEvent_Struct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createEvent",
      "createEvent((address,string,string,string,string,uint256)):(uint256)",
      [ethereum.Value.fromTuple(event_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId_: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId_: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEventInfo(eventId_: BigInt): NoAV1__getEventInfoResultValue0Struct {
    let result = super.call(
      "getEventInfo",
      "getEventInfo(uint256):((address,string,string,string,string,uint256))",
      [ethereum.Value.fromUnsignedBigInt(eventId_)]
    );

    return changetype<NoAV1__getEventInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getEventInfo(
    eventId_: BigInt
  ): ethereum.CallResult<NoAV1__getEventInfoResultValue0Struct> {
    let result = super.tryCall(
      "getEventInfo",
      "getEventInfo(uint256):((address,string,string,string,string,uint256))",
      [ethereum.Value.fromUnsignedBigInt(eventId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NoAV1__getEventInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  getSlotDetail(slot_: BigInt): NoAV1__getSlotDetailResultValue0Struct {
    let result = super.call(
      "getSlotDetail",
      "getSlotDetail(uint256):((string,string,string,uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(slot_)]
    );

    return changetype<NoAV1__getSlotDetailResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getSlotDetail(
    slot_: BigInt
  ): ethereum.CallResult<NoAV1__getSlotDetailResultValue0Struct> {
    let result = super.tryCall(
      "getSlotDetail",
      "getSlotDetail(uint256):((string,string,string,uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(slot_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NoAV1__getSlotDetailResultValue0Struct>(value[0].toTuple())
    );
  }

  isApprovedForAll(owner_: Address, operator_: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromAddress(operator_)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner_: Address,
    operator_: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromAddress(operator_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForSlot(
    owner_: Address,
    slot_: BigInt,
    operator_: Address
  ): boolean {
    let result = super.call(
      "isApprovedForSlot",
      "isApprovedForSlot(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromUnsignedBigInt(slot_),
        ethereum.Value.fromAddress(operator_)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForSlot(
    owner_: Address,
    slot_: BigInt,
    operator_: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForSlot",
      "isApprovedForSlot(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromUnsignedBigInt(slot_),
        ethereum.Value.fromAddress(operator_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metadataDescriptor(): Address {
    let result = super.call(
      "metadataDescriptor",
      "metadataDescriptor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_metadataDescriptor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "metadataDescriptor",
      "metadataDescriptor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId_: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId_: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  slotByIndex(index_: BigInt): BigInt {
    let result = super.call("slotByIndex", "slotByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index_)
    ]);

    return result[0].toBigInt();
  }

  try_slotByIndex(index_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slotByIndex",
      "slotByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slotCount(): BigInt {
    let result = super.call("slotCount", "slotCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_slotCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slotCount", "slotCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slotOf(tokenId_: BigInt): BigInt {
    let result = super.call("slotOf", "slotOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toBigInt();
  }

  try_slotOf(tokenId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slotOf", "slotOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slotURI(slot_: BigInt): string {
    let result = super.call("slotURI", "slotURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(slot_)
    ]);

    return result[0].toString();
  }

  try_slotURI(slot_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("slotURI", "slotURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(slot_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index_: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index_)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenInSlotByIndex(slot_: BigInt, index_: BigInt): BigInt {
    let result = super.call(
      "tokenInSlotByIndex",
      "tokenInSlotByIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(slot_),
        ethereum.Value.fromUnsignedBigInt(index_)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenInSlotByIndex(
    slot_: BigInt,
    index_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenInSlotByIndex",
      "tokenInSlotByIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(slot_),
        ethereum.Value.fromUnsignedBigInt(index_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner_: Address, index_: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromUnsignedBigInt(index_)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner_: Address,
    index_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromUnsignedBigInt(index_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenSupplyInSlot(slot_: BigInt): BigInt {
    let result = super.call(
      "tokenSupplyInSlot",
      "tokenSupplyInSlot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(slot_)]
    );

    return result[0].toBigInt();
  }

  try_tokenSupplyInSlot(slot_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenSupplyInSlot",
      "tokenSupplyInSlot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(slot_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId_: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  valueDecimals(): i32 {
    let result = super.call("valueDecimals", "valueDecimals():(uint8)", []);

    return result[0].toI32();
  }

  try_valueDecimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("valueDecimals", "valueDecimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class Approve1Call extends ethereum.Call {
  get inputs(): Approve1Call__Inputs {
    return new Approve1Call__Inputs(this);
  }

  get outputs(): Approve1Call__Outputs {
    return new Approve1Call__Outputs(this);
  }
}

export class Approve1Call__Inputs {
  _call: Approve1Call;

  constructor(call: Approve1Call) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Approve1Call__Outputs {
  _call: Approve1Call;

  constructor(call: Approve1Call) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ComboCall extends ethereum.Call {
  get inputs(): ComboCall__Inputs {
    return new ComboCall__Inputs(this);
  }

  get outputs(): ComboCall__Outputs {
    return new ComboCall__Outputs(this);
  }
}

export class ComboCall__Inputs {
  _call: ComboCall;

  constructor(call: ComboCall) {
    this._call = call;
  }

  get eventId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fromTokenIds_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get image_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get eventMetadataURI_(): string {
    return this._call.inputValues[3].value.toString();
  }

  get to_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ComboCall__Outputs {
  _call: ComboCall;

  constructor(call: ComboCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreateEventCall extends ethereum.Call {
  get inputs(): CreateEventCall__Inputs {
    return new CreateEventCall__Inputs(this);
  }

  get outputs(): CreateEventCall__Outputs {
    return new CreateEventCall__Outputs(this);
  }
}

export class CreateEventCall__Inputs {
  _call: CreateEventCall;

  constructor(call: CreateEventCall) {
    this._call = call;
  }

  get event_(): CreateEventCallEvent_Struct {
    return changetype<CreateEventCallEvent_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateEventCall__Outputs {
  _call: CreateEventCall;

  constructor(call: CreateEventCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateEventCallEvent_Struct extends ethereum.Tuple {
  get organizer(): Address {
    return this[0].toAddress();
  }

  get eventName(): string {
    return this[1].toString();
  }

  get eventDescription(): string {
    return this[2].toString();
  }

  get eventImage(): string {
    return this[3].toString();
  }

  get eventMetadataURI(): string {
    return this[4].toString();
  }

  get mintMax(): BigInt {
    return this[5].toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get metadataDescriptor_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get receiver_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get uToken_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get slotDetail_(): MintCallSlotDetail_Struct {
    return changetype<MintCallSlotDetail_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get proof_(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCallSlotDetail_Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get image(): string {
    return this[2].toString();
  }

  get eventId(): BigInt {
    return this[3].toBigInt();
  }

  get eventMetadataURI(): string {
    return this[4].toString();
  }
}

export class MintEventToManyUsersCall extends ethereum.Call {
  get inputs(): MintEventToManyUsersCall__Inputs {
    return new MintEventToManyUsersCall__Inputs(this);
  }

  get outputs(): MintEventToManyUsersCall__Outputs {
    return new MintEventToManyUsersCall__Outputs(this);
  }
}

export class MintEventToManyUsersCall__Inputs {
  _call: MintEventToManyUsersCall;

  constructor(call: MintEventToManyUsersCall) {
    this._call = call;
  }

  get slotDetail_(): MintEventToManyUsersCallSlotDetail_Struct {
    return changetype<MintEventToManyUsersCallSlotDetail_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get to_(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class MintEventToManyUsersCall__Outputs {
  _call: MintEventToManyUsersCall;

  constructor(call: MintEventToManyUsersCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintEventToManyUsersCallSlotDetail_Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get image(): string {
    return this[2].toString();
  }

  get eventId(): BigInt {
    return this[3].toBigInt();
  }

  get eventMetadataURI(): string {
    return this[4].toString();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data_(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved_(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetApprovalForSlotCall extends ethereum.Call {
  get inputs(): SetApprovalForSlotCall__Inputs {
    return new SetApprovalForSlotCall__Inputs(this);
  }

  get outputs(): SetApprovalForSlotCall__Outputs {
    return new SetApprovalForSlotCall__Outputs(this);
  }
}

export class SetApprovalForSlotCall__Inputs {
  _call: SetApprovalForSlotCall;

  constructor(call: SetApprovalForSlotCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get slot_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get operator_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get approved_(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SetApprovalForSlotCall__Outputs {
  _call: SetApprovalForSlotCall;

  constructor(call: SetApprovalForSlotCall) {
    this._call = call;
  }
}

export class SetComboPreNoAPriceCall extends ethereum.Call {
  get inputs(): SetComboPreNoAPriceCall__Inputs {
    return new SetComboPreNoAPriceCall__Inputs(this);
  }

  get outputs(): SetComboPreNoAPriceCall__Outputs {
    return new SetComboPreNoAPriceCall__Outputs(this);
  }
}

export class SetComboPreNoAPriceCall__Inputs {
  _call: SetComboPreNoAPriceCall;

  constructor(call: SetComboPreNoAPriceCall) {
    this._call = call;
  }

  get price_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetComboPreNoAPriceCall__Outputs {
  _call: SetComboPreNoAPriceCall;

  constructor(call: SetComboPreNoAPriceCall) {
    this._call = call;
  }
}

export class SetMerkleRootCall extends ethereum.Call {
  get inputs(): SetMerkleRootCall__Inputs {
    return new SetMerkleRootCall__Inputs(this);
  }

  get outputs(): SetMerkleRootCall__Outputs {
    return new SetMerkleRootCall__Outputs(this);
  }
}

export class SetMerkleRootCall__Inputs {
  _call: SetMerkleRootCall;

  constructor(call: SetMerkleRootCall) {
    this._call = call;
  }

  get eventId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get merkleRoot_(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetMerkleRootCall__Outputs {
  _call: SetMerkleRootCall;

  constructor(call: SetMerkleRootCall) {
    this._call = call;
  }
}

export class SetMetadataDescriptorCall extends ethereum.Call {
  get inputs(): SetMetadataDescriptorCall__Inputs {
    return new SetMetadataDescriptorCall__Inputs(this);
  }

  get outputs(): SetMetadataDescriptorCall__Outputs {
    return new SetMetadataDescriptorCall__Outputs(this);
  }
}

export class SetMetadataDescriptorCall__Inputs {
  _call: SetMetadataDescriptorCall;

  constructor(call: SetMetadataDescriptorCall) {
    this._call = call;
  }

  get metadataDescriptor_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMetadataDescriptorCall__Outputs {
  _call: SetMetadataDescriptorCall;

  constructor(call: SetMetadataDescriptorCall) {
    this._call = call;
  }
}

export class SetWhiteListedMintCall extends ethereum.Call {
  get inputs(): SetWhiteListedMintCall__Inputs {
    return new SetWhiteListedMintCall__Inputs(this);
  }

  get outputs(): SetWhiteListedMintCall__Outputs {
    return new SetWhiteListedMintCall__Outputs(this);
  }
}

export class SetWhiteListedMintCall__Inputs {
  _call: SetWhiteListedMintCall;

  constructor(call: SetWhiteListedMintCall) {
    this._call = call;
  }

  get isWhiteListMint_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetWhiteListedMintCall__Outputs {
  _call: SetWhiteListedMintCall;

  constructor(call: SetWhiteListedMintCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get fromTokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferFrom1Call extends ethereum.Call {
  get inputs(): TransferFrom1Call__Inputs {
    return new TransferFrom1Call__Inputs(this);
  }

  get outputs(): TransferFrom1Call__Outputs {
    return new TransferFrom1Call__Outputs(this);
  }
}

export class TransferFrom1Call__Inputs {
  _call: TransferFrom1Call;

  constructor(call: TransferFrom1Call) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFrom1Call__Outputs {
  _call: TransferFrom1Call;

  constructor(call: TransferFrom1Call) {
    this._call = call;
  }
}

export class TransferFrom2Call extends ethereum.Call {
  get inputs(): TransferFrom2Call__Inputs {
    return new TransferFrom2Call__Inputs(this);
  }

  get outputs(): TransferFrom2Call__Outputs {
    return new TransferFrom2Call__Outputs(this);
  }
}

export class TransferFrom2Call__Inputs {
  _call: TransferFrom2Call;

  constructor(call: TransferFrom2Call) {
    this._call = call;
  }

  get fromTokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get toTokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFrom2Call__Outputs {
  _call: TransferFrom2Call;

  constructor(call: TransferFrom2Call) {
    this._call = call;
  }
}
